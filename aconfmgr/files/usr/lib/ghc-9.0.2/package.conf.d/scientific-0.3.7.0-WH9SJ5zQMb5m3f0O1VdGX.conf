name:                 scientific
version:              0.3.7.0
visibility:           public
id:                   scientific-0.3.7.0-WH9SJ5zQMb5m3f0O1VdGX
key:                  scientific-0.3.7.0-WH9SJ5zQMb5m3f0O1VdGX
license:              BSD-3-Clause
maintainer:           Bas van Dijk <v.dijk.bas@gmail.com>
author:               Bas van Dijk
homepage:             https://github.com/basvandijk/scientific
synopsis:             Numbers represented using scientific notation
description:
    "Data.Scientific" provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.

    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.

    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:

    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.

    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:

    >>> read "1e1000000000" :: Scientific
    1.0e1000000000

    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.

category:             Data
abi:                  b9b3de52dda4371cbce46a90f8e5f6d0
exposed:              True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific

hidden-modules:       GHC.Integer.Compat Utils
import-dirs:          /usr/lib/ghc-9.0.2/site-local/scientific-0.3.7.0
library-dirs:         /usr/lib/ghc-9.0.2/site-local/scientific-0.3.7.0
dynamic-library-dirs: /usr/lib
data-dir:             /usr/share/haskell-scientific
hs-libraries:         HSscientific-0.3.7.0-WH9SJ5zQMb5m3f0O1VdGX
depends:
    base-4.15.1.0 binary-0.8.8.0 bytestring-0.10.12.1
    containers-0.6.4.1 deepseq-1.4.5.0
    hashable-1.4.3.0-FviSDMTOEDP4a4xPfq9DNL
    integer-logarithms-1.0.3.1-5kS6jNbEsIJGKjr4VAkZqE
    primitive-0.7.4.0-vwDq7840sM3xgs4vWuDTK template-haskell-2.17.0.0
    text-1.2.5.0

haddock-interfaces:   /usr/share/doc/haskell-scientific/html/scientific.haddock
haddock-html:         /usr/share/doc/haskell-scientific/html
